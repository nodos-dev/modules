// Copyright MediaZ Teknoloji A.S. All Rights Reserved.

#version 450

layout (local_size_x = 8, local_size_y = 8) in;
layout (binding = 0)  readonly buffer InputNV12Buffer
{
    uint Pixels[];
} Input;
layout (binding = 1, rgba16)  uniform writeonly  image2D Output;


vec3 yuvToRgb(vec3 yuv)
{
	vec3 rgb;
	rgb.r = yuv.x + 1.402 * yuv.z;
	rgb.g = yuv.x - 0.344136 * yuv.y - 0.714136 * yuv.z;
	rgb.b = yuv.x + 1.772 * yuv.y;
	return rgb;
}

void main()
{

	ivec2 imageSize = imageSize(Output);

	uint x = gl_GlobalInvocationID.x * 4;
    uint y = gl_GlobalInvocationID.y * 2;

	uint width = imageSize.x;
	uint height = imageSize.y;

    // Check if within bounds
    if (x >= width || y >= height)
        return;

    // Calculate plane sizes
    uint yPlaneSize = width / 4 * height;

    // Load UV values
    uint uvIndex = y / 2 * (width / 4) + x / 4;
    uint uvValue = Input.Pixels[yPlaneSize + uvIndex];
    float U0 = float(uvValue & 0xFF) / 255.0 - 0.5;
    float V0 = float((uvValue >> 8) & 0xFF) / 255.0 - 0.5;
	float U1 = float(uvValue >> 16 & 0xFF) / 255.0 - 0.5;
	float V1 = float((uvValue >> 24) & 0xFF) / 255.0 - 0.5;

    // Write to 4x2 pixels, read 2 Y plane bytes each contains 4 Y values, UV plane byte contains 2 UV values
	// Maybe use group shared memory & write to single pixel on each invocation
	for (uint j = 0; j < 2; ++j) {
		uint currentY = y + j;

		// Ensure we are within bounds
		if (currentY >= height)
			continue;

		// Load Y value
		uint yIndex = currentY * width/4 + x/4;

		uint yVal = Input.Pixels[yIndex];
		for(int i = 0; i < 4; i++)
		{
			uint currentX = x + i;
			if(currentX >= width)
				continue;
			uint shift = (currentX % 4) * 8;
			uint yMask = 0x000000FF << shift;
			float Y = float((yVal & yMask) >> shift) / 255.0;

			float v = ((currentX / 2) == 1) ? V1 : V0;
			float u = ((currentX / 2) == 1) ? U1 : U0;
			// Convert YUV to RGB
			float R = Y + 1.402 * v;
			float G = Y - 0.344136 * u - 0.714136 * v;
			float B = Y + 1.772 * u;

			// Clamp RGB values to [0, 1]
			R = clamp(R, 0.0, 1.0);
			G = clamp(G, 0.0, 1.0);
			B = clamp(B, 0.0, 1.0);

			// Store output as R16G16B16A16
			imageStore(Output, ivec2(currentX, currentY), vec4(R, G, B, 1.0));
		}
	}
}